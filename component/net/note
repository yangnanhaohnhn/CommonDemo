协程需要运行在协程上下文环境，在非协程环境中凭空启动协程，有三种方式:
1.runBlocking{}
启动一个新协程，并阻塞当前线程，直到其内部所有逻辑及子协程逻辑全部执行完成。
该方法的设计目的是让suspend风格编写的库能够在常规阻塞代码中使用，常在main方法和测试中使用。
2.GlobalScope.launch{}
在应用范围内启动一个新协程，协程的生命周期与应用程序一致。这样启动的协程并不能使线程保活，就像守护线程。

由于这样启动的协程存在启动协程的组件已被销毁但协程还存在的情况，极限情况下可能导致资源耗尽，因此并不推荐这样启动，
尤其是在客户端这种需要频繁创建销毁组件的场景。

3.CoroutineScope + launch{}
这是在应用中最推荐使用的协程使用方式——为自己的组件实现CoroutieScope接口，在需要的地方使用launch{}方法启动协程。
使得协程和该组件生命周期绑定，组件销毁时，协程一并销毁。从而实现安全可靠地协程调用。

async{}:异步启动一个子协程，并返回Deffer对象，可通过调用Deffer.await()方法等待该子协程执行完成并获取结果，
常用于并发执行-同步等待的情况

取消：
launch{}返回Job，async{}返回Deffer，Job和Deffer都有cancel()方法，用于取消协程。
从协程内部看取消的效果

标准库的挂起方法会抛出CancellationException异常。
用户自定义的常规逻辑并不会收到影响，除非我们手动检测isActive标志

val job = launch {
    // 如果这里不检测isActive标记，协程就不会被正常cancel，而是执行直到正常结束
    while (isActive) {
        ......
    }
}
job.cancelAndJoin() // 取消该作业并等待它结束

